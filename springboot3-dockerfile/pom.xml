<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.cyk</groupId>
        <artifactId>springboot3-integrated</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>springboot3-dockerfile</artifactId>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <docker.image.prefix>springboot3_docker</docker.image.prefix>
    </properties>



    <build>
        <plugins>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <configuration>
                    <!-- 打包的image名称 -->
                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                    <!-- Dockerfile文件的位置，以项目的 root 目录为根节点，建议到单独建立一个目录。位置非固定，随意指定，如：./src/docker/-->
                    <dockerDirectory>src/main/docker</dockerDirectory>
                    <!-- 远程docker的api地址，这里为我的linux开发机地址-->
                    <!--<dockerHost>http://48.99.190.38:2375</dockerHost>-->
                    <!-- image tag，可以指定多个，不声明默认即latest-->
                    <imageTags>
                        <imageTag>latest</imageTag>
                        <imageTag>${project.version}}</imageTag>
                    </imageTags>
                    <!-- 执行构建docker镜像的时候需要哪些文件，即Dockerfile和项目jar和指定他们的位置-->
                    <resources>
                        <resource>
                            <!--这里指定的文件是target中的jar文件 -->
                            <!--
                                ${project.build.directory} 表示项目项目构建输出目录，默认为 ${basedir}/target
                                ${project.build.filename} 表示项目打包输出文件的名称，默认为 ${project.artifactId}-${project.version}
                            -->
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>